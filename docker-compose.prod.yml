version: '3.8'

services:
    db:
        image: postgres:14
        environment:
            POSTGRES_DB: restaurant_reservation_production
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - postgres_data_prod:/var/lib/postgresql/data
            - ./backups:/backups
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - internal

    redis:
        image: redis:7-alpine
        volumes:
            - redis_data_prod:/data
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - internal

    web:
        image: ${DOCKER_REGISTRY}/restaurant-reservation:${IMAGE_TAG:-latest}
        ports:
            - '3000:3000'
        environment:
            - RAILS_ENV=production
            - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/restaurant_reservation_production
            - REDIS_URL=redis://redis:6379/0
            - SECRET_KEY_BASE=${SECRET_KEY_BASE}
            - RAILS_SERVE_STATIC_FILES=true
            - RAILS_LOG_TO_STDOUT=true
        restart: unless-stopped
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s
        networks:
            - internal
            - external
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    sidekiq:
        image: ${DOCKER_REGISTRY}/restaurant-reservation:${IMAGE_TAG:-latest}
        command: bundle exec sidekiq
        environment:
            - RAILS_ENV=production
            - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/restaurant_reservation_production
            - REDIS_URL=redis://redis:6379/0
            - SECRET_KEY_BASE=${SECRET_KEY_BASE}
            - RAILS_LOG_TO_STDOUT=true
        restart: unless-stopped
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - internal
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    nginx:
        image: nginx:alpine
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./ssl:/etc/nginx/ssl:ro
            - static_files:/app/public:ro
        restart: unless-stopped
        depends_on:
            - web
        networks:
            - external
        logging:
            driver: 'json-file'
            options:
                max-size: '5m'
                max-file: '3'

networks:
    internal:
        driver: bridge
    external:
        driver: bridge

volumes:
    postgres_data_prod:
    redis_data_prod:
    static_files:
