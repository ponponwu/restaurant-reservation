version: '3.8'

services:
    db:
        image: postgres:14
        environment:
            POSTGRES_DB: restaurant_reservation_development
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - '5432:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        image: redis:7-alpine
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5

    web:
        build: .
        ports:
            - '3000:3000'
        environment:
            - RAILS_ENV=${RAILS_ENV:-development}
            - DATABASE_URL=postgres://postgres:postgres@db:5432/restaurant_reservation_${RAILS_ENV:-development}
            - REDIS_URL=redis://redis:6379/0
            - SECRET_KEY_BASE=${SECRET_KEY_BASE}
        volumes:
            - .:/app
            - bundle_cache:/usr/local/bundle
            - node_modules:/app/node_modules
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    sidekiq:
        build: .
        command: bundle exec sidekiq
        environment:
            - RAILS_ENV=${RAILS_ENV:-development}
            - DATABASE_URL=postgres://postgres:postgres@db:5432/restaurant_reservation_${RAILS_ENV:-development}
            - REDIS_URL=redis://redis:6379/0
            - SECRET_KEY_BASE=${SECRET_KEY_BASE}
        volumes:
            - .:/app
            - bundle_cache:/usr/local/bundle
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy

volumes:
    postgres_data:
    redis_data:
    bundle_cache:
    node_modules:
